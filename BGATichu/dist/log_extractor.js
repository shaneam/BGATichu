(()=>{"use strict";var t={699:t=>{const o=/A new round starts/i,e=/consecutive doubles from (\d{1,2}|\w)\w* to (\d{1,2}|\w)/i,r=/plays Pair of (\d{1,2}|\w)/i,s=/plays Triple of (\d{1,2}|\w)/i,n=/plays Run of \d+ cards from (\d{1,2}|\w)\w* to (\d{1,2}|\w)/i,l=/plays (\d{1,2}|\w)\w*'?s? full of (\d{1,2}|\w)\w*'?s?/i,a=/plays Bomb of four (\d{1,2}|\w)/i,u=/plays Straight flush bomb starting from (\d{1,2}|\w)\w* to (\d{1,2}|\w)/i,d=/plays (\d{1,2}|dragon|dog|[a-z])/i,i=["2","3","4","5","6","7","8","9","10","J","Q","K","A"];t.exports=class{constructor(){this.cardsUsed=new Map}getCardsUsed(){return this.cardsUsed}getSinglePlayCards(t){let o=t.match(d);if(null==o)return[];if(o.length>2)return console.log("Found too many matches "+t),[];let e=o[1];return console.log("found single "+e),[e]}getPairPlayCards(t){let o=t.match(r);return null==o?[]:o.length>2?(console.log("Found too many matches "+t),[]):(console.log("found pair "+o[1]),[o[1],o[1]])}getTriplePlayCards(t){let o=t.match(s);return null==o?[]:o.length>2?(console.log("Found too many matches "+t),[]):(console.log("found triple "+o[1]),[o[1],o[1],o[1]])}getQuadBombCards(t){let o=t.match(a);if(null==o)return[];if(o.length>2)return console.log("Found too many matches "+t),[];const e=o[1];return console.log("found quad "+e+" bomb"),[e,e,e,e]}getConsecutivePairsCards(t){let o=t.match(e);if(null==o)return[];if(o.length>3)return console.log("Found too many matches "+t),[];console.log("found pairs "+o[1]+" to "+o[2]);var r=[],s=!1;for(var n of i)if(s||n!=o[1]||(s=!0),s&&(r.push(n),r.push(n)),n==o[2])break;return r}getStraightCards(t){let o=t.match(n);if(null==o)return[];if(o.length>3)return console.log("Found too many matches "+t),[];const e=o[1],r=o[2];console.log("found straight "+e+" to "+r);var s=[],l=!1;for(var a of i)if(l||a!=e||(l=!0),l&&s.push(a),a==r)break;return s}getStraightBombCards(t){let o=t.match(u);if(null==o)return[];if(o.length>3)return console.log("Found too many matches "+t),[];const e=o[1],r=o[2];console.log("found straight bomb "+e+" to "+r);var s=[],n=!1;for(var l of i)if(n||l!=e||(n=!0),n&&s.push(l),l==r)break;return s}getFullHouseCards(t){let o=t.match(l);if(null==o)return[];if(o.length>3)return console.log("Found too many matches "+t),[];const e=o[1],r=o[2];return console.log("found full house 3 "+e+" and 2 "+r),[e,e,e,r,r]}processLogText(t){var e;if(o.test(t))return this.cardsUsed.clear(),void console.log("Reseting card counts");let r=this.getConsecutivePairsCards(t);0==r.length&&(r=this.getPairPlayCards(t)),0==r.length&&(r=this.getTriplePlayCards(t)),0==r.length&&(r=this.getStraightCards(t)),0==r.length&&(r=this.getFullHouseCards(t)),0==r.length&&(r=this.getQuadBombCards(t)),0==r.length&&(r=this.getStraightBombCards(t)),0==r.length&&(r=this.getSinglePlayCards(t)),console.log("Found cards: "+r);for(let t of r)this.cardsUsed.set(t,(null!==(e=this.cardsUsed.get(t))&&void 0!==e?e:0)+1)}}}},o={};!function e(r){var s=o[r];if(void 0!==s)return s.exports;var n=o[r]={exports:{}};return t[r](n,n.exports,e),n.exports}(699)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,