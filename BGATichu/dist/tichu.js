(()=>{"use strict";var t={699:t=>{const e=/A new round starts/i,o=/consecutive doubles from (\d{1,2}|\w)\w* to (\d{1,2}|\w)/i,r=/plays Pair of (\d{1,2}|\w)/i,s=/plays Triple of (\d{1,2}|\w)/i,n=/plays Run of \d+ cards from (\d{1,2}|\w)\w* to (\d{1,2}|\w)/i,l=/plays (\d{1,2}|\w)\w*'?s? full of (\d{1,2}|\w)\w*'?s?/i,a=/plays Bomb of four (\d{1,2}|\w)/i,d=/plays Straight flush bomb starting from (\d{1,2}|\w)\w* to (\d{1,2}|\w)/i,u=/plays (\d{1,2}|dragon|dog|[a-z])/i,i=["2","3","4","5","6","7","8","9","10","J","Q","K","A"];t.exports=class{constructor(){this.cardsUsed=new Map}getCardsUsed(){return this.cardsUsed}getSinglePlayCards(t){let e=t.match(u);if(null==e)return[];if(e.length>2)return console.log("Found too many matches "+t),[];let o=e[1];return console.log("found single "+o),[o]}getPairPlayCards(t){let e=t.match(r);return null==e?[]:e.length>2?(console.log("Found too many matches "+t),[]):(console.log("found pair "+e[1]),[e[1],e[1]])}getTriplePlayCards(t){let e=t.match(s);return null==e?[]:e.length>2?(console.log("Found too many matches "+t),[]):(console.log("found triple "+e[1]),[e[1],e[1],e[1]])}getQuadBombCards(t){let e=t.match(a);if(null==e)return[];if(e.length>2)return console.log("Found too many matches "+t),[];const o=e[1];return console.log("found quad "+o+" bomb"),[o,o,o,o]}getConsecutivePairsCards(t){let e=t.match(o);if(null==e)return[];if(e.length>3)return console.log("Found too many matches "+t),[];console.log("found pairs "+e[1]+" to "+e[2]);var r=[],s=!1;for(var n of i)if(s||n!=e[1]||(s=!0),s&&(r.push(n),r.push(n)),n==e[2])break;return r}getStraightCards(t){let e=t.match(n);if(null==e)return[];if(e.length>3)return console.log("Found too many matches "+t),[];const o=e[1],r=e[2];console.log("found straight "+o+" to "+r);var s=[],l=!1;for(var a of i)if(l||a!=o||(l=!0),l&&s.push(a),a==r)break;return s}getStraightBombCards(t){let e=t.match(d);if(null==e)return[];if(e.length>3)return console.log("Found too many matches "+t),[];const o=e[1],r=e[2];console.log("found straight bomb "+o+" to "+r);var s=[],n=!1;for(var l of i)if(n||l!=o||(n=!0),n&&s.push(l),l==r)break;return s}getFullHouseCards(t){let e=t.match(l);if(null==e)return[];if(e.length>3)return console.log("Found too many matches "+t),[];const o=e[1],r=e[2];return console.log("found full house 3 "+o+" and 2 "+r),[o,o,o,r,r]}processLogText(t){var o;if(e.test(t))return this.cardsUsed.clear(),void console.log("Reseting card counts");let r=this.getConsecutivePairsCards(t);0==r.length&&(r=this.getPairPlayCards(t)),0==r.length&&(r=this.getTriplePlayCards(t)),0==r.length&&(r=this.getStraightCards(t)),0==r.length&&(r=this.getFullHouseCards(t)),0==r.length&&(r=this.getQuadBombCards(t)),0==r.length&&(r=this.getStraightBombCards(t)),0==r.length&&(r=this.getSinglePlayCards(t)),console.log("Found cards: "+r);for(let t of r)this.cardsUsed.set(t,(null!==(o=this.cardsUsed.get(t))&&void 0!==o?o:0)+1)}}},957:function(t,e,o){var r=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const s=new(r(o(699)).default);chrome.runtime.onMessage.addListener((function(t,e,o){console.log(e.tab?"from a content script:"+e.tab.url:"from the extension"),console.log(s.getCardsUsed()),"getCards"===t.method&&o(Object.fromEntries(s.getCardsUsed()))}));const n=new MutationObserver(((t,e)=>{t.filter((t=>"childList"===t.type)).forEach((t=>t.addedNodes.forEach((t=>{const e=t.textContent;e&&(console.log(e),s.processLogText(e.toUpperCase()))}))))})),l=document.getElementById("logs");l&&n.observe(l,{childList:!0})}},e={};!function o(r){var s=e[r];if(void 0!==s)return s.exports;var n=e[r]={exports:{}};return t[r].call(n.exports,n,n.exports,o),n.exports}(957)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,